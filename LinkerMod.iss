; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AppName=LinkerMod
AppVersion=DevHead
DefaultGroupName=FA
UninstallDisplayIcon={app}\LinkerMod.exe
Compression=lzma2
SolidCompression=yes
OutputDir=./build/

; Install Path Options
DefaultDirName={code:GetDefaultDir}
AppendDefaultDirName=no
UsePreviousAppDir=no
DirExistsWarning=no
DisableDirPage=No

[Languages]
Name: english; MessagesFile: compiler:Default.isl

; Inlude the Inno Downloader scripts
#include ReadReg(HKEY_LOCAL_MACHINE,'Software\Sherlock Software\InnoTools\Downloader','ScriptPath','');

[Files]                              
; Source: "build\Release\game_mod.dll"; DestDir: "{app}"
; Source: "README.md"; DestDir: "{app}"; Flags: isreadme

[Icons]
; Name: "{group}\My Program"; Filename: "{app}\LinkerMod.exe"

[Components]
Name: "GameMod"; Description: "Game Mod"; Types: full compact custom; Flags: fixed

; exlusive flag makes them radio buttons
Name: "LinkerMod"; Description: "Mod Tools"; Types: full custom
Name: "LinkerMod\AssetUtil";	Description: "Asset Util"; Types: full;			Flags: 
Name: "LinkerMod\AssetViewer";	Description: "AssetViewer Mod"; Types: full;	Flags: 
Name: "LinkerMod\CoD2Map";		Description: "CoD2Map Mod"; Types: full;		Flags: 
Name: "LinkerMod\CoD2Rad";		Description: "CoD2Rad Mod"; Types: full;		Flags: 
Name: "LinkerMod\Linker";		Description: "Linker Mod"; Types: full;			Flags: 
Name: "LinkerMod\Radiant";		Description: "Radiant Mod"; Types: full;		Flags: 

[Files]
Source: "test.dll"; DestDir: "{app}"
Source: "build\Release\installer.dll";	DestDir: "{app}"
;Flags: dontcopy
Source: "build\Release\proxy.dll";			DestDir: "{app}\bin";
Source: "build\Release\game_mod.dll";		DestDir: "{app}\bin"; Components: GameMod
Source: "build\Release\asset_util.exe";		DestDir: "{app}\bin"; Components: LinkerMod\AssetUtil
Source: "build\Release\asset_viewer.dll";	DestDir: "{app}\bin"; Components: LinkerMod\AssetViewer
Source: "build\Release\cod2map.dll";		DestDir: "{app}\bin"; Components: LinkerMod\CoD2Map
Source: "build\Release\cod2rad.dll";		DestDir: "{app}\bin"; Components: LinkerMod\CoD2Rad
Source: "build\Release\linker_pc.dll";		DestDir: "{app}\bin"; Components: LinkerMod\Linker
Source: "build\Release\radiant_mod.dll";	DestDir: "{app}\bin"; Components: LinkerMod\Radiant

[Code]
(* Note: These *MUST* have the module exports definition files	*)
(*       Using __declspec(dllexport) does *NOT* work 			*)
procedure MyFunc(hWnd: Integer; lpText, lpCaption: String; uType: Cardinal);
external 'MyDllFunc@files:test.dll stdcall';

function  TestFunc( buffer:PChar): Cardinal;
external 'TestFunc@files:installer.dll stdcall';

function  GetGamePath(): PChar;
external 'LMI_GamePath@files:installer.dll stdcall';

function  SetInstallPath(path: String): Boolean;
external 'LMI_SetInstallPath@files:installer.dll stdcall';

//
// Get the default installation directory
//
function GetDefaultDir(Param: string): string;
var
	installPath: PChar;
begin
	installPath := GetGamePath();
	if(length(installPath) < 1) then
		Result := #0
	else
		Result := installPath;
end;

function GetString(): String;
var str: String;
	size: Cardinal;
	tmp: PChar;
begin 
	// Note on passing PChars using RemObjects Pascal Script:
 	// '' pass a nil PChar    (null pointer)
  	// #0 pass an empty PChar (pointer to an empty string)
	size := TestFunc('');
	SetLength(str, size+1);
	TestFunc(str);
	MsgBox(str, mbInformation, MB_OK);
	Result := str;
end;

// Test
var progress:TOutputProgressWizardPage;

procedure InitializeWizard;
var
	a: string;
	downloadPage:TWizardpage;
begin
	itd_init;

	// Attempt to get the installation path
	

	

	// GetString();
	
	 {Create our own progress page for the initial download of a small
		textfile from the server which says what the latest version is}
	//	progress := CreateOutputProgressPage(ITD_GetString(ITDS_Update_Caption), ITD_GetString(ITDS_Update_Description));

	// Stuff
	//Create the ITD GUI so that we have it if we decide to download a new intaller version
	downloadPage:=itd_downloadafter(wpWelcome);
end;



function NextButtonClick(curPageID:integer): boolean;
begin
	Result := True;

	// Validate the install path
	if (CurPageID = wpSelectDir) and (SetInstallPath(WizardDirValue) = false) then
	begin
		Result := False;
		MsgBox('Target installation directory is invalid. ' +
			'Choose a different one.', mbError, MB_OK);
	end;
end;

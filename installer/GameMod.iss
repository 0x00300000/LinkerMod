; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#include "./scripts/common.iss"

[Setup]
AppName=GameMod
AppVersion=DevHead
DefaultGroupName=FA
UninstallDisplayIcon={app}\GameMod.exe
Compression=lzma2
SolidCompression=yes
OutputDir=./build/
DisableWelcomePage=no

WizardImageFile=C:\Users\SE2Dev\Pictures\dface_512x512.bmp
WizardSmallImageFile=C:\Users\SE2Dev\Pictures\dface_512x512.bmp

; Install Path Options
DefaultDirName={code:GetDefaultDir}
AppendDefaultDirName=no
UsePreviousAppDir=no
DirExistsWarning=no
DisableDirPage=No

[Languages]
Name: english; MessagesFile: compiler:Default.isl

[Icons]
Name: "{commondesktop}\Game Mod"; Filename: "{app}\bin\BlackOps.exe"
; Name: "{group}\LinkerMod\Game_Mod"; Filename: "{app}\bin\BlackOps.exe"

[Components]
Name: "GameMod"; Description: "Game Mod"; Types: full compact custom; Flags: fixed

[Files]
Source: "build\Release\installer.dll";	DestDir: "{app}"
; Flags: dontcopy
Source: "build\Release\proxy.dll";			DestDir: "{app}\bin";
Source: "build\Release\game_mod.dll";		DestDir: "{app}\bin"; Components: GameMod

[Code]
(* Note: These *MUST* use the module exports definition files	*)
(*       Using __declspec(dllexport) does *NOT* work 			*)
function  TestFunc( buffer:PChar): Cardinal;
external 'TestFunc@files:installer.dll stdcall';



function  SetInstallPath(path: String): Boolean;
external 'LMI_SetInstallPath@files:installer.dll stdcall';

function  GetVersions(): PChar;
external 'LMI_GetTags@files:installer.dll stdcall';



function GetAutoFiles(Param: string): string;
begin
  Result := 'C:\Users\SE2Dev\Desktop\blender-2.80.0-git.a1689fb091a-windows64\2.80\python\bin\python.exe';
  { make it return path to the checked out files }
end;

function GetString(): String;
var str: String;
	size: Cardinal;
	tmp: PChar;
begin 
	// Note on passing PChars using RemObjects Pascal Script:
 	// '' pass a nil PChar    (null pointer)
  	// #0 pass an empty PChar (pointer to an empty string)
	size := TestFunc('');
	SetLength(str, size+1);
	TestFunc(str);
	MsgBox(str, mbInformation, MB_OK);
	Result := str;
end;

function GetVersionTags(): TStringList;
var
	installPath: PChar;
	inputString: String;
	list: TStringList;
begin
	installPath := GetVersions();
	if(length(installPath) < 1) then
		inputString := #0
	else
		inputString := installPath;

	list := TStringList.create;
	list.Text := inputString;

	Result := list;
end;

// Test
var progress:TOutputProgressWizardPage;

procedure InitializeWizard;
var
	downloadPage:TWizardpage;
	UserPage: TWizardPage;
	ListBox: TNewListBox; 
	tags: TStringList;
	i: Cardinal;
begin
	 {Create our own progress page for the initial download of a small
		textfile from the server which says what the latest version is}
	//	progress := CreateOutputProgressPage(ITD_GetString(ITDS_Update_Caption), ITD_GetString(ITDS_Update_Description));
end;

function NextButtonClick(curPageID:integer): boolean;
begin
	Result := True;

	//
	// Validate the install path
	//
	if (CurPageID = wpSelectDir) and (SetInstallPath(WizardDirValue) = false) then
	begin
		Result := False;
		MsgBox('Target installation directory is invalid. ' +
			'Choose a different one.', mbError, MB_OK);
	end;
end;

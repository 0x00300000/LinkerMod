#include "aitype.h"
#include "../common/fs.h"
#include "../gsc.h"

#include <iostream>
#include <regex>

const char* AIType::gdf = "aitype.gdf";

AIType::AIType()
{
	// Properties are automatically initialized to their respective default values when ExtractFromGSC is run
}

AIType::~AIType()
{
}

int AIType::ExtractFromGSC(const char* qpath)
{
	size_t len = FS_FileSize(qpath);
	if (len == -1)
		return -1;

	std::ifstream t(qpath);
	std::string str((std::istreambuf_iterator<char>(t)), std::istreambuf_iterator<char>());

	GSC_ExtractStringProperty("animTree", str.c_str(), &this->animTree, "");

	GSC_AIType_ExtractCharacters(str, this->character, AITYPE_CHARACTERCOUNT, "");

	GSC_ExtractStringProperty("team", str.c_str(), &this->team, "axis");
	GSC_ExtractNumberProperty("accuracy", str.c_str(), &this->accuracy, "0.2");
	this->comments = "AutoGenerated by Asset_Util";
	GSC_ExtractStringProperty("csvInclude", str.c_str(), &this->csvInclude, "");
	GSC_AIType_ExtractEngagementProperty("setEngagementMaxDist", AI_ENGAGEMENTTYPE_DIST, str.c_str(), &this->engageMaxDist, "768");
	GSC_AIType_ExtractEngagementProperty("setEngagementMaxDist", AI_ENGAGEMENTTYPE_FALLOFFDIST, str.c_str(), &this->engageMaxFalloffDist, "1024");;
	GSC_AIType_ExtractEngagementProperty("setEngagementMinDist", AI_ENGAGEMENTTYPE_DIST, str.c_str(), &this->engageMinDist, "256");
	GSC_AIType_ExtractEngagementProperty("setEngagementMinDist", AI_ENGAGEMENTTYPE_FALLOFFDIST, str.c_str(), &this->engageMinFalloffDist, "0");
	GSC_ExtractNumberProperty("grenadeAmmo", str.c_str(), &this->grenadeAmmo, "0");
	GSC_ExtractStringProperty("grenadeWeapon", str.c_str(), &this->grenadeWeapon, "");
	GSC_ExtractNumberProperty("health", str.c_str(), &this->health, "100");
	GSC_ExtractStringVariable("defaultmdl", str.c_str(), &this->radiantModel, "");
	GSC_ExtractStringProperty("secondaryweapon", str.c_str(), &this->secondaryweapon, "");
	GSC_ExtractStringProperty("sidearm", str.c_str(), &this->sidearm, "");
	GSC_ExtractStringProperty("type", str.c_str(), &this->type, "human");
	GSC_ExtractStringProperty("weapon", str.c_str(), &this->weapon, "");

	const char* start = FS_GetFilenameSubString(qpath);
	const char* stop = FS_GetExtensionSubString(qpath);
	this->_name = std::string(start, stop);

	return 0;
}

int AIType::Write(FILE* f)
{
	//
	// Apparently fprintf automatically converts \n to \r\n
	//
	fprintf(f, "\t\"%s\" ( \"%s\" )\n", this->_name.c_str(), this->gdf);
	fprintf(f, "\t{\n");

	fprintf(f, "\t\t\"%s\" \"%s\"\n", "accuracy", this->accuracy.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "animTree", this->animTree.c_str());

	for (int i = 0; i < AITYPE_CHARACTERCOUNT; i++)
	{
		fprintf(f, "\t\t\"%s%d\" \"%s\"\n", "character", i + 1, this->character[i].c_str());
	}

	fprintf(f, "\t\t\"%s\" \"%s\"\n", "comments", this->comments.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "csvInclude", this->csvInclude.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "engageMaxDist", this->engageMaxDist.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "engageMaxFalloffDist", this->engageMaxFalloffDist.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "engageMinDist", this->engageMinDist.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "engageMinFalloffDist", this->engageMinFalloffDist.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "grenadeAmmo", this->grenadeAmmo.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "grenadeWeapon", this->grenadeWeapon.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "health", this->health.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "radiantModel", this->radiantModel.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "secondaryweapon", this->secondaryweapon.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "sidearm", this->sidearm.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "team", this->team.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "type", this->type.c_str());
	fprintf(f, "\t\t\"%s\" \"%s\"\n", "weapon", this->weapon.c_str());

	fprintf(f, "\t}\n");

	return 0;
}